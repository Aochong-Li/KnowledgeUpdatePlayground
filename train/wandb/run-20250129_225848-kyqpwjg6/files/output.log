  0%|                                                                                                                                                               | 0/248356 [00:00<?, ?it/s]
> /home/al2644/research/codebase/knowledge_update/training/trainers.py(62)compute_loss()
-> logits = outputs.logits
tensor(1.1177, device='cuda:0', grad_fn=<_DDPSinkBackward>)
> /home/al2644/research/codebase/knowledge_update/training/trainers.py(75)compute_loss()
-> prior_mask = (shift_type_labels == PRIOR_TOKEN_TYPE)
tensor(1.1177, device='cuda:0', grad_fn=<NllLossBackward0>)
tensor(285.0121, device='cuda:0', grad_fn=<NllLossBackward0>)
tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0')
255
tensor(285.0121, device='cuda:0', grad_fn=<NllLossBackward0>)
tensor(1.1177, device='cuda:0', grad_fn=<DivBackward0>)
tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0')
> /home/al2644/research/codebase/knowledge_update/training/trainers.py(76)compute_loss()
-> knowledge_mask = (shift_type_labels == KNOWLEDGE_ARTICLE_TOKEN_TYPE)
> /home/al2644/research/codebase/knowledge_update/training/trainers.py(77)compute_loss()
-> nontarget_mask = (shift_type_labels == NONTARGET_ARTICLE_TOKEN_TYPE)
> /home/al2644/research/codebase/knowledge_update/training/trainers.py(80)compute_loss()
-> loss_fct = CrossEntropyLoss(reduction='sum')  # Use 'sum' to handle averages manually
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True], device='cuda:0')
> /home/al2644/research/codebase/knowledge_update/training/trainers.py(81)compute_loss()
-> prior_loss = loss_fct(shift_logits[prior_mask], shift_labels[prior_mask])
> /home/al2644/research/codebase/knowledge_update/training/trainers.py(82)compute_loss()
-> knowledge_loss = loss_fct(shift_logits[knowledge_mask], shift_labels[knowledge_mask])
tensor(0., device='cuda:0', grad_fn=<NllLossBackward0>)
> /home/al2644/research/codebase/knowledge_update/training/trainers.py(83)compute_loss()
-> nontarget_loss = loss_fct(shift_logits[nontarget_mask], shift_labels[nontarget_mask])
> /home/al2644/research/codebase/knowledge_update/training/trainers.py(85)compute_loss()
-> _log_per_token_loss(
tensor(0., device='cuda:0', grad_fn=<NllLossBackward0>)
tensor(285.0121, device='cuda:0', grad_fn=<NllLossBackward0>)
1.1176943311504288
> /home/al2644/research/codebase/knowledge_update/training/trainers.py(87)compute_loss()
-> "step": self.state.global_step,
> /home/al2644/research/codebase/knowledge_update/training/trainers.py(88)compute_loss()
-> "epoch": self.state.epoch,
> /home/al2644/research/codebase/knowledge_update/training/trainers.py(89)compute_loss()
-> "prior_loss_per_token": prior_loss.item() /  max(prior_mask.sum().item(), 1),
> /home/al2644/research/codebase/knowledge_update/training/trainers.py(90)compute_loss()
-> "knowledge_loss_per_token": knowledge_loss.item() / max(knowledge_mask.sum().item(), 1),
> /home/al2644/research/codebase/knowledge_update/training/trainers.py(91)compute_loss()
-> "nontarget_loss_per_token": nontarget_loss.item() / max(nontarget_mask.sum().item(), 1)
> /home/al2644/research/codebase/knowledge_update/training/trainers.py(86)compute_loss()
-> obj = {
> /home/al2644/research/codebase/knowledge_update/training/trainers.py(93)compute_loss()
-> filename = "step_loss.jsonl"
*** NameError: name 'obj' is not defined
> /home/al2644/research/codebase/knowledge_update/training/trainers.py(85)compute_loss()
-> _log_per_token_loss(
> /home/al2644/research/codebase/knowledge_update/training/trainers.py(100)compute_loss()
-> return (loss, outputs) if return_outputs else loss
tensor(1.1177, device='cuda:0', grad_fn=<_DDPSinkBackward>)
  File "/home/al2644/research/codebase/knowledge_update/training/train.py", line 82, in <module>
    train()
  File "/home/al2644/research/codebase/knowledge_update/training/train.py", line 76, in train
    trainer.train()
  File "/home/al2644/anaconda3/envs/nlp/lib/python3.12/site-packages/transformers/trainer.py", line 1938, in train
    return inner_training_loop(
           ^^^^^^^^^^^^^^^^^^^^
  File "/home/al2644/anaconda3/envs/nlp/lib/python3.12/site-packages/transformers/trainer.py", line 2279, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/al2644/anaconda3/envs/nlp/lib/python3.12/site-packages/transformers/trainer.py", line 3349, in training_step
    self.accelerator.backward(loss, **kwargs)
  File "/home/al2644/anaconda3/envs/nlp/lib/python3.12/site-packages/accelerate/accelerator.py", line 2241, in backward
    loss.backward(**kwargs)
  File "/home/al2644/anaconda3/envs/nlp/lib/python3.12/site-packages/torch/_tensor.py", line 521, in backward
    torch.autograd.backward(
  File "/home/al2644/anaconda3/envs/nlp/lib/python3.12/site-packages/torch/autograd/__init__.py", line 289, in backward
    _engine_run_backward(
  File "/home/al2644/anaconda3/envs/nlp/lib/python3.12/site-packages/torch/autograd/graph.py", line 768, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 224.00 MiB. GPU 0 has a total capacity of 93.02 GiB of which 39.25 MiB is free. Including non-PyTorch memory, this process has 92.97 GiB memory in use. Of the allocated memory 87.60 GiB is allocated by PyTorch, and 4.09 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
[rank0]: Traceback (most recent call last):
[rank0]:   File "/home/al2644/research/codebase/knowledge_update/training/train.py", line 82, in <module>
[rank0]:     train()
[rank0]:   File "/home/al2644/research/codebase/knowledge_update/training/train.py", line 76, in train
[rank0]:     trainer.train()
[rank0]:   File "/home/al2644/anaconda3/envs/nlp/lib/python3.12/site-packages/transformers/trainer.py", line 1938, in train
[rank0]:     return inner_training_loop(
[rank0]:            ^^^^^^^^^^^^^^^^^^^^
[rank0]:   File "/home/al2644/anaconda3/envs/nlp/lib/python3.12/site-packages/transformers/trainer.py", line 2279, in _inner_training_loop
[rank0]:     tr_loss_step = self.training_step(model, inputs)
[rank0]:                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[rank0]:   File "/home/al2644/anaconda3/envs/nlp/lib/python3.12/site-packages/transformers/trainer.py", line 3349, in training_step
[rank0]:     self.accelerator.backward(loss, **kwargs)
[rank0]:   File "/home/al2644/anaconda3/envs/nlp/lib/python3.12/site-packages/accelerate/accelerator.py", line 2241, in backward
[rank0]:     loss.backward(**kwargs)
[rank0]:   File "/home/al2644/anaconda3/envs/nlp/lib/python3.12/site-packages/torch/_tensor.py", line 521, in backward
[rank0]:     torch.autograd.backward(
[rank0]:   File "/home/al2644/anaconda3/envs/nlp/lib/python3.12/site-packages/torch/autograd/__init__.py", line 289, in backward
[rank0]:     _engine_run_backward(
[rank0]:   File "/home/al2644/anaconda3/envs/nlp/lib/python3.12/site-packages/torch/autograd/graph.py", line 768, in _engine_run_backward
[rank0]:     return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
[rank0]:            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[rank0]: torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 224.00 MiB. GPU 0 has a total capacity of 93.02 GiB of which 39.25 MiB is free. Including non-PyTorch memory, this process has 92.97 GiB memory in use. Of the allocated memory 87.60 GiB is allocated by PyTorch, and 4.09 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
